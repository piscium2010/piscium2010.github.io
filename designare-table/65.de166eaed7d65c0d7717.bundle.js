(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{252:function(n,e,a){"use strict";a.r(e);e.default="import React, { useState } from 'react'\nimport Table, { Th, Sorter } from 'designare-table'\n\nconst serverData = [\n    { name: 'Johnson & Johnson', last: 135.7, chg: 2.33, chgp: 1.75 },\n    { name: 'Cisco Systems Inc.', last: 46.79, chg: 0.43, chgp: 0.93 },\n    { name: 'Coca-Cola Co.', last: 53.49, chg: -0.02, chgp: 0.04 },\n    { name: 'Walt Disney Co.', last: 130.8, chg: 1.10, chgp: 0.85 },\n    { name: 'Walmart Inc.', last: 119.4, chg: -0.11, chgp: 0.09 }\n]\n\nconst byNumber = (a, b) => {\n    return a - b\n}\n\nconst byStr = (a, b) => {\n    if (a > b) return 1\n    if (a == b) return 0\n    if (a < b) return -1\n}\n\nconst fakeFetch = (dataKey, direction) => {\n    const by = (a, b) => dataKey === 'name'\n        ? byStr(a[dataKey], b[dataKey])\n        : byNumber(a[dataKey], b[dataKey])\n\n    return new Promise(resolve => {\n        let result = Array.from(serverData)\n        result = direction === 'default'\n            ? result\n            : direction === 'asc'\n                ? result.sort(by)\n                : result.sort(by).reverse()\n        resolve(result)\n    })\n}\n\nexport default function () {\n    const [data, setData] = useState(serverData)\n    const [sorter, setSorter] = useState()\n\n    return (\n        <Table\n            columns={[\n                {\n                    Header: <Th><span>COMPANY</span><Sorter by='server' /></Th>,\n                    dataKey: 'name',\n                    width: '*'\n                },\n                {\n                    Header: <Th><span>LAST</span><Sorter by='server' /></Th>,\n                    dataKey: 'last'\n                },\n                {\n                    Header: <Th><span>CHG</span><Sorter by='server' /></Th>,\n                    dataKey: 'chg'\n                },\n                {\n                    Header: <Th><span>CHG %</span><Sorter by='server' /></Th>,\n                    dataKey: 'chgp'\n                }\n            ]}\n            data={data}\n            sorter={sorter}\n            onChangeSorter={({ dataKey, direction, by }) => {\n                if (by === 'server') {\n                    fakeFetch(dataKey, direction).then(data => {\n                        setData(data)\n                        setSorter({ dataKey, direction })\n                    })\n                }\n            }}\n        />\n    )\n}"}}]);